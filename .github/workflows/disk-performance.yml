name: Disk Performance Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'

jobs:
  disk-performance:
    name: Disk Performance Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-arm, macos-15]
        include:
          - os: ubuntu-latest
            platform: "Ubuntu x86_64"
          - os: ubuntu-arm
            platform: "Ubuntu ARM64"
          - os: macos-15
            platform: "macOS 15 ARM"
          - os: macos-15-intel
            platform: "macOS 15 x86"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: System Information
      run: |
        echo "=== System Information ==="
        echo "Platform: ${{ matrix.platform }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Architecture: $(uname -m)"
        echo "Kernel: $(uname -r)"
        if command -v lscpu >/dev/null 2>&1; then
          echo "CPU Info:"
          lscpu | head -20
        elif command -v sysctl >/dev/null 2>&1; then
          echo "CPU Info (macOS):"
          sysctl -n machdep.cpu.brand_string
          sysctl -n hw.ncpu
          sysctl -n hw.memsize | awk '{print "Memory: " $1/1024/1024/1024 " GB"}'
        fi
        echo "Disk space:"
        df -h
        echo ""
    
    - name: Write Performance Test (1GB)
      run: |
        echo "=== Write Performance Test (1GB) ==="
        echo "Testing write speed with 1GB file..."
        
        # Ensure clean cache before test
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true
        else
          sync
        fi
        
        # Test write performance
        time_output=$(time (dd if=/dev/zero of=testfile_1gb bs=1M count=1024 && sync) 2>&1)
        echo "$time_output"
        
        # Extract and display results
        if [[ -f testfile_1gb ]]; then
          file_size=$(ls -lh testfile_1gb | awk '{print $5}')
          echo "Created file size: $file_size"
        fi
        
        # Clean up
        rm -f testfile_1gb
        echo ""
    
    - name: Write Performance Test (100MB with different block sizes)
      run: |
        echo "=== Write Performance Test (Various Block Sizes) ==="
        
        for bs in 1k 4k 16k 64k 256k 1M; do
          echo "Testing write speed with block size: $bs"
          
          # Calculate count to get ~100MB
          case $bs in
            1k) count=102400 ;;
            4k) count=25600 ;;
            16k) count=6400 ;;
            64k) count=1600 ;;
            256k) count=400 ;;
            1M) count=100 ;;
          esac
          
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true
          else
            sync
          fi
          
          time_output=$(time (dd if=/dev/zero of=testfile_${bs} bs=${bs} count=${count} && sync) 2>&1)
          echo "$time_output"
          rm -f testfile_${bs}
          echo ""
        done
    
    - name: Read Performance Test
      run: |
        echo "=== Read Performance Test ==="
        
        # Create a test file for reading
        echo "Creating 500MB test file for read test..."
        dd if=/dev/zero of=readtest_file bs=1M count=500 2>/dev/null
        sync
        
        # Clear cache before read test
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true
        else
          sync
        fi
        
        echo "Testing read speed..."
        time_output=$(time dd if=readtest_file of=/dev/null bs=1M 2>&1)
        echo "$time_output"
        
        # Clean up
        rm -f readtest_file
        echo ""
    
    - name: Mixed I/O Performance Test
      run: |
        echo "=== Mixed I/O Performance Test ==="
        echo "Testing mixed read/write operations..."
        
        # Create source file
        dd if=/dev/zero of=source_file bs=1M count=200 2>/dev/null
        
        # Test copy operation (read + write)
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true
        else
          sync
        fi
        
        echo "Copy test (200MB):"
        time_output=$(time (dd if=source_file of=dest_file bs=1M && sync) 2>&1)
        echo "$time_output"
        
        # Clean up
        rm -f source_file dest_file
        echo ""
    
    - name: Random I/O Test (if available)
      run: |
        echo "=== Random I/O Test ==="
        
        if command -v shuf >/dev/null 2>&1; then
          echo "Testing random write pattern..."
          
          # Create file with random data
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            time_output=$(time (dd if=/dev/urandom of=random_file bs=1M count=50 && sync) 2>&1)
          else
            # macOS - use /dev/random but with smaller size due to entropy limitations
            time_output=$(time (dd if=/dev/random of=random_file bs=1k count=1024 && sync) 2>&1)
          fi
          echo "$time_output"
          
          rm -f random_file
        else
          echo "Random test tools not available on this platform"
        fi
        echo ""
    
    - name: Storage Information Summary
      run: |
        echo "=== Final Storage Information ==="
        echo "Available disk space:"
        df -h .
        
        echo ""
        echo "I/O statistics (if available):"
        if command -v iostat >/dev/null 2>&1; then
          iostat -x 1 1 2>/dev/null | tail -20 || echo "iostat not available"
        else
          echo "iostat not available on this platform"
        fi
        
        echo ""
        echo "Test completed on ${{ matrix.platform }}"
    
    - name: Upload Results (Optional)
      if: always()
      run: |
        echo "=== Test Summary for ${{ matrix.platform }} ==="
        echo "All disk performance tests completed"
        echo "Platform: ${{ matrix.platform }}"
        echo "Runner: ${{ runner.os }}"
        echo "Timestamp: $(date -u)"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
